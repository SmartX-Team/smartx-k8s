{{/* Load cluster-wide values */}}
{{- $_ := set $ "Cluster" dict }}
{{- $_ := set $.Cluster "Values" dict }}
{{- range $path, $_ := $.Files.Glob "clusters/*.yaml" }}
  {{- $_ := set $.Cluster "Values" ( $.Files.Get $path | fromYaml | merge $.Cluster.Values ) }}
{{- end }}

{{/* Apply patches */}}
{{- range $path, $_ := $.Files.Glob "patches.yaml" }}
  {{- $_ := set $ "Values" ( tpl ( $.Files.Get $path ) $.Cluster | fromYaml | merge $.Values ) }}
{{- end }}

{{/* Patch base image */}}
{{- $_ := set $.Values "baseImage" $.Cluster.Values.baseImage }}

{{/* Load manifest */}}
{{- range $path, $_ := $.Files.Glob "manifest.yaml" }}
  {{- $_ := set $ "Manifest" ( tpl ( $.Files.Get $path ) $ | fromYaml ) }}
  {{- if not ( empty $.Manifest.spec.containerImage.name ) }}
    {{- $_ := set $.Release "Name" $.Manifest.spec.containerImage.name }}
  {{- else }}
    {{- range $name := $.Manifest.metadata.name | split "." }}
    {{- $_ := set $.Release "Name" $name }}
    {{- end }}
  {{- end }}
  {{- $_ := set $.Release "Namespace" $.Manifest.spec.containerImage.namespace }}
  {{- $_ := set $.Release "Version" ( tpl (
    $.Manifest.spec.containerImage.version
    | default $.Cluster.Values.openark.version
    | default $.Chart.AppVersion
  ) $ ) }}
{{- end }}

{{/* Create a Containerfile ConfigMap */}}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name | quote }}
  namespace: {{ .Release.Namespace | quote }}
  annotations:
    images.ulagbulag.io/base.repo: {{ $.Values.baseImage.repo | quote }}
  labels:
{{- include "helm.labels" $ | nindent 4 }}
    app.kubernetes.io/version: {{ .Release.Version | quote }}
data:
  args: |
{{- range $_ := $.Manifest.spec.containerImage.buildArgs }}
{{- if empty .value }}
    --build-arg={{ printf "%s=\"${%s}\"" ( .name | quote ) .name }}
{{- else }}
    --build-arg={{ printf "%s=%s" ( .name | quote ) ( .value | quote ) }}
{{- end }}
{{- end }}
  Containerfile: |
{{- tpl ( $.Files.Get "template.containerfile" ) $ | nindent 4 }}
