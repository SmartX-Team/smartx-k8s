[package]
name = "openark-core-opentelemetry"

authors = { workspace = true }
description = { workspace = true }
documentation = { workspace = true }
edition = { workspace = true }
include = { workspace = true }
keywords = { workspace = true }
license = { workspace = true }
readme = { workspace = true }
rust-version = { workspace = true }
homepage = { workspace = true }
repository = { workspace = true }
version = { workspace = true }

[lints]
workspace = true

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[features]
default = []
alloc = [
    "chrono?/alloc",
    # "tracing?/alloc",
    "tracing-subscriber?/alloc",
    "tracing-subscriber?/smallvec",
]
std = [
    "chrono?/std",
    "tracing?/std",
    "tracing-subscriber?/ansi",
    "tracing-subscriber?/env-filter",
    "tracing-subscriber?/fmt",
    "tracing-subscriber?/std",
]

# OpenTelemetry
opentelemetry = [
    "dep:chrono",
    "dep:opentelemetry",
    "dep:tracing",
    "dep:tracing-subscriber",
    "dep:tracing-web",
    "std",
]
opentelemetry-all = [
    "opentelemetry-logs",
    "opentelemetry-metrics",
    "opentelemetry-trace",
]
opentelemetry-otlp = [
    "dep:opentelemetry-appender-tracing",
    "dep:opentelemetry-otlp",
    "dep:opentelemetry-sdk",
    "dep:tracing-opentelemetry",
    "opentelemetry",
]

# OpenTelemetry pillars and functions
opentelemetry-logs = [
    "opentelemetry",
    "opentelemetry?/internal-logs",
    "opentelemetry?/spec_unstable_logs_enabled",
    "opentelemetry-appender-tracing?/spec_unstable_logs_enabled",
    "opentelemetry-otlp?/internal-logs",
    "opentelemetry-otlp?/logs",
    "opentelemetry-sdk?/experimental_logs_batch_log_processor_with_async_runtime",
    "opentelemetry-sdk?/internal-logs",
    "opentelemetry-sdk?/spec_unstable_logs_enabled",
]
opentelemetry-metrics = [
    "opentelemetry",
    "opentelemetry?/metrics",
    "opentelemetry-otlp?/metrics",
    "opentelemetry-sdk?/experimental_metrics_periodicreader_with_async_runtime",
    "opentelemetry-sdk?/metrics",
    "tracing-opentelemetry?/metrics",
]
opentelemetry-trace = [
    "opentelemetry",
    "opentelemetry?/trace",
    "opentelemetry-otlp?/trace",
    "opentelemetry-sdk?/experimental_trace_batch_span_processor_with_async_runtime",
    "opentelemetry-sdk?/trace",
    "tracing-opentelemetry?/tracing-log",
    "tracing-subscriber?/tracing-log",
]

# TLS
tls-default = ["tls-aws-lc-rs"]
tls-aws-lc-rs = ["opentelemetry-otlp?/reqwest-rustls"]
tls-openssl = ["opentelemetry-otlp?/reqwest-client", "std"]

[dependencies]
opentelemetry = { workspace = true, optional = true }
opentelemetry-appender-tracing = { workspace = true, optional = true, features = [
    # "experimental_metadata_attributes",
] }
opentelemetry-otlp = { workspace = true, optional = true, features = [
    "grpc-tonic",
] }
opentelemetry-sdk = { workspace = true, optional = true, features = [
    "experimental_async_runtime",
    "rt-tokio",
] }
tracing = { workspace = true, optional = true }
tracing-opentelemetry = { workspace = true, optional = true }
tracing-subscriber = { workspace = true, optional = true, features = [
    "chrono",
] }

[target.'cfg(target_arch = "wasm32")'.dependencies]
# `::tracing_subscriber::fmt::time::ChronoUtc` requires manual wasm binding
chrono = { workspace = true, optional = true, features = ["wasmbind"] }
tracing-web = { workspace = true, optional = true }
