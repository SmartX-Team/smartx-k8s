#cloud-config
version: 1
autoinstall:
  version: 1

  apt:
    fallback: abort
    geoip: true
    preserve_sources_list: false
    mirror-selection:
      primary:
        - country-mirror
  kernel:
{{- if eq "edge" .Values.kiss.os.kernel }}
    flavor: hwe
{{- end }}
  keyboard:
    layout: us
  locale: en_US.UTF-8
  network:
    version: 2
    renderer: NetworkManager
    ethernets:
      alleths:
        match:
          name: en*
        dhcp4: true
  # refresh-installer:
  #   update: true
  shutdown: reboot
  timezone: {{ .Values.cluster.region.timezone | default "geoip" | quote }}
  # updates: security

  ssh:
    install-server: true
    allow-pw: false
    authorized-keys:
      - {{ .Values.kiss.auth.ssh.key.public | quote }}

  user-data:
    disable_root: true
    package_update: false
    package_upgrade: false
    users:
{{- range $_ := .Values.addUsers }}
      - name: {{ .name | quote }}
{{- if not ( empty .groups ) }}
        groups: {{ .groups | join ", " | quote }}
{{- end }}
        lock_passwd: {{ .lock_passwd | ne false }}
{{- if not ( empty .passwd ) }}
        passwd: {{ .passwd | quote }}
{{- end }}
        shell: {{ .shell | default "/bin/bash" | quote }}
{{- if not ( empty $.Values.kiss.auth.ssh.key.public ) }}
        ssh_authorized_keys:
          - {{ $.Values.kiss.auth.ssh.key.public | quote }}
{{- end }}
{{- if .sudo | default false }}
        sudo: "ALL=(ALL) NOPASSWD: ALL"
{{- end }}
{{- end }}

  storage:
    swap:
      size: 0
    config:
      # Root drive
      - id: disk0
        type: disk
        match: {{- .Values.storage.match | toYaml | nindent 10 }}
        ptable: gpt
        grub_device: true
        preserve: false
        wipe: superblock
      # Partition / EFI
      - id: partition_efi
        type: partition
        size: 1G
        device: disk0
        flag: boot
        grub_device: true
        preserve: false
      - id: format_efi
        type: format
        fstype: fat32
        volume: partition_efi
        preserve: false
      - id: mount_efi
        type: mount
        path: /boot/efi
        device: format_efi

{{- if .Values.storage.lvm }}
      # Partition / LVM
      - id: partition_lvm
        type: partition
{{- if eq "0" ( .Values.storage.size | toString ) }}
        size: -1
{{- else }}
        size: {{ .Values.storage.size }}
{{- end }}
        device: disk0
        preserve: false
      - id: vg_rootfs
        name: vg_rootfs
        type: lvm_volgroup
        devices:
          - partition_lvm
      # Logical Volume / Root
      - id: lv_root
        name: lv_root
        type: lvm_partition
        volgroup: vg_rootfs
        size: 10G
      - id: format_root
        type: format
        fstype: {{ .Values.storage.fstype | quote }}
        volume: lv_root
        preserve: false
      - id: mount_root
        type: mount
        path: /
        device: format_root
      # Logical Volume / ContainerD
      - id: lv_containerd
        name: lv_containerd
        type: lvm_partition
        volgroup: vg_rootfs
        size: 120G
      - id: format_containerd
        type: format
        fstype: {{ .Values.storage.fstype | quote }}
        volume: lv_containerd
        preserve: false
      - id: mount_containerd
        type: mount
        path: /var/lib/containerd
        device: format_containerd
      # Logical Volume / Logs
      - id: lv_log
        name: lv_log
        type: lvm_partition
        volgroup: vg_rootfs
        size: 10G
      - id: format_log
        type: format
        fstype: {{ .Values.storage.fstype | quote }}
        volume: lv_log
        preserve: false
      - id: mount_log
        type: mount
        path: /var/log
        device: format_log
      # Logical Volume / ETCD
      - id: lv_etcd
        name: lv_etcd
        type: lvm_partition
        volgroup: vg_rootfs
        size: 10G
      - id: format_etcd
        type: format
        fstype: {{ .Values.storage.fstype | quote }}
        volume: lv_etcd
        preserve: false
      - id: mount_etcd
        type: mount
        path: /opt/etcd
        device: format_etcd
{{- else }}
      # Partition / Root
      - id: partition_root
        type: partition
{{- if eq "0" ( .Values.storage.size | toString ) }}
        size: -1
{{- else }}
        size: {{ .Values.storage.size }}
{{- end }}
        device: disk0
        preserve: false
      - id: format_root
        type: format
        fstype: {{ .Values.storage.fstype | quote }}
        volume: partition_root
        preserve: false
      - id: mount_root
        type: mount
        path: /
        device: format_root
{{- if ne "0" ( .Values.storage.size | toString ) }}
      # Partition / Free
      - id: partition_free
        type: partition
        size: -1
        device: disk0
        preserve: false
{{- end }}
{{- end }}

  early-commands:
    # Installer Network Configuration
{{- if not $.Values.cluster.standalone }}
    - |
      cat <<EOF >>/etc/systemd/resolved.conf
      [Resolve]
      DNS={{ .Values.cluster.nameservers.loadBalancer.ipv4 | default .Values.cluster.nameservers.incluster.ipv4 }}
      EOF
      systemctl restart systemd-resolved.service
{{- end }}
    - |
      mkdir -p /etc/NetworkManager/conf.d/
      cat <<EOF >/etc/NetworkManager/conf.d/99-systemd.conf
      [main]
      dns=default
      rc-manager=resolvconf
      EOF
    - rm -f /etc/netplan/50-cloud-init*
    - |
      cat <<EOF >/etc/netplan/50-cloud-init.yaml
      network:
        version: 2
        renderer: NetworkManager
        ethernets:
          alleths:
            match:
              name: en*
            dhcp4: true
      EOF
    - >
      apt-get clean && apt-get update && apt-get install -y network-manager
      && systemctl disable --now systemd-networkd.service systemd-networkd.socket
      && systemctl enable --now NetworkManager.service
      && nmcli connection reload
      && for dev in $(nmcli connection show --active | awk '{print $4}' | grep -P '^en'); do
      nmcli connection down "${dev}" || true
      ; done
    - until netplan apply; do sleep 3; done
{{- if not $.Values.cluster.standalone }}
    - until curl "http://assets.{{ .Release.Namespace }}.svc.{{ include "helm.clusterDomainName" $ }}"; do netplan apply || true; sleep 30; done
{{- end }}

  late-commands:
    # Execute Post-installation Scripts
{{- if not $.Values.cluster.standalone }}
    - echo "nameserver {{ $.Values.cluster.nameservers.loadBalancer.ipv4 | default $.Values.cluster.nameservers.incluster.ipv4 }}" >/etc/resolv.conf # Keep DNS
{{- else }}
    - >
      echo "nameserver {{ $.Values.network.nameservers.ns1 }}" >/etc/resolv.conf
      && echo "nameserver {{ $.Values.network.nameservers.ns2 }}" >>/etc/resolv.conf
    - until curtin in-target --target=/target -- apt-get update; do sleep 3; done
{{- end }}
    - rm -f /target/etc/resolv.conf && cp -L /etc/resolv.conf /target/etc/resolv.conf
    - mount --bind /tmp /target/tmp
{{- if $.Values.cluster.standalone }}
    - cp -Lr "/cdrom/autoinstall/smartx-k8s" "/target/opt/smartx-k8s" && chmod -R u+w,go-rwx "/target/opt/smartx-k8s"
{{- end }}
{{- range $path, $_ := $.Files.Glob "assets/patches/*.sh" }}
{{- $filename := base $path }}
{{- if $.Values.cluster.standalone }}
    - curtin in-target --target=/target -- "/opt/smartx-k8s/patches/{{ $filename }}"
{{- else }}
    - >
      curl -o "/target/tmp/{{ $filename }}"
      "http://assets.{{ $.Release.Namespace }}.svc.{{ include "helm.clusterDomainName" $ }}/patches/{{ $filename }}"
      && chmod a+x "/target/tmp/{{ $filename }}"
      && curtin in-target --target=/target -- "/tmp/{{ $filename }}"
      && rm -f "/target/tmp/{{ $filename }}"
{{- end }}
{{- end }}
    - umount /target/tmp
